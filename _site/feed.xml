<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/jasper-blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/jasper-blog/" rel="alternate" type="text/html" /><updated>2021-07-13T18:35:53+05:30</updated><id>http://localhost:4000/jasper-blog/feed.xml</id><title type="html">Tanmay’s blog</title><subtitle>I've mainly set up this blog to jot down the progress about my project with Krita, however I have a feeling this will continue for longer than that :) </subtitle><entry><title type="html">A tale of two curves - stuff about my GSoC project</title><link href="http://localhost:4000/jasper-blog/jekyll/update/2021/07/13/gsoc-update.html" rel="alternate" type="text/html" title="A tale of two curves - stuff about my GSoC project" /><published>2021-07-13T18:35:20+05:30</published><updated>2021-07-13T18:35:20+05:30</updated><id>http://localhost:4000/jasper-blog/jekyll/update/2021/07/13/gsoc-update</id><content type="html" xml:base="http://localhost:4000/jasper-blog/jekyll/update/2021/07/13/gsoc-update.html">Hello there! Has been some time since I've updated this blog, apologies for that. I have no idea how time flied so quickly! Anyway, I had been at work all the while, writing code, maintaining a diary on the side, and I'll be posting my updates over here now.

Week 3: I started writing the code for finding the intersection points between two curves. As expected, there were several problems at first, and the code did not work. However after some debugging I managed to get it to run. Also, started to look into how to approach set operations on shapes.

Week 4: Now I was busy porting the C++ code to work with Qt frameworks. This was a bit trickier than I had originally thought, with slight differences between the STL implementation and Qt implementation causing subtle bugs (std::vector vs QVector). Had to spend most of the time to sort that out. Also, unit testing is really useful, and definetely not as easy as taught in college :P

Week 5: Well, the code to find points of intersection finally was complete (Woohoo :) ). Now, I was deep enough into the boolean/set operation research to know it was going to be a bit problematic. Qt's internal approach relies heavily on using line segments and uses Kd-tree for that, and the code is rather complex, intertwined. But, where there's will, there's way :)

Week 6: My code was finally presentable. Spent some time optimizing it. Spent most of the time incorporating my mentor's suggestions in my codebase, and writing better documentation for the functions and classes. At this point, added additional functions to verify the validity of intersection points returned, just to cover all the corner cases. 

Week 7: Went knee deep into the clipping algorithm code. the Qt code as is could be potentially used for boolean operations as we have functions for pairwise intersections ( optimized for vertical and horizontal lines with curves, which is what is required by Vatti), however there is a potential overhead as we will have to abandon Kd-tree for R-tree. Then, there's Greiner-Hormann algorithm, which could be just what we need, but again, there is no proper implementation for the variant which handles curves. Also, one supposedly cool thing about Greiner-Hormann is not requiring to find points of self intersections. Now this would ordinarily be alright, but as we're dealing with cubic bezier curves, they might self-intersect, and given a 2D representation, it could lead to unexpected behaviors and possible regressions. But, I guess I've came up with a nice way to work with Vatti algorithm without much overhead (more on that later), let's see how it goes :D</content><author><name>Tanmay Chavan</name></author><category term="jekyll" /><category term="update" /><summary type="html">Hello there! Has been some time since I've updated this blog, apologies for that. I have no idea how time flied so quickly! Anyway, I had been at work all the while, writing code, maintaining a diary on the side, and I'll be posting my updates over here now.</summary></entry><entry><title type="html">A tale of two curves - stuff about my GSoC project</title><link href="http://localhost:4000/jasper-blog/jekyll/update/2021/06/01/krita-gsoc.md.html" rel="alternate" type="text/html" title="A tale of two curves - stuff about my GSoC project" /><published>2021-06-01T20:47:59+05:30</published><updated>2021-06-01T20:47:59+05:30</updated><id>http://localhost:4000/jasper-blog/jekyll/update/2021/06/01/krita-gsoc.md</id><content type="html" xml:base="http://localhost:4000/jasper-blog/jekyll/update/2021/06/01/krita-gsoc.md.html">&lt;p&gt;Hi everyone! I’m Tanmay Chavan, a CS Sophomore at PICT, India. This summer, I’m going to be working for Krita, to implement cleaner operations on vector shapes.&lt;/p&gt;

&lt;p&gt;I had taken a class on computer graphics the earlier semester, and I found it to be really interesting. There is some kind of satisfaction and a sense of fulfillment in seeing your algorithms generate reults which can be seen by our eyes. So, this project statement piqued my interest. Upon talking with Dmitry, the lead developer of the software, I came to know the issue lies in the way Qt deals with curve intersections. Their algorithm, although fast, was unsuitable for our purposes. It approximated the curve as a polygon, which meant you could get away with finding intersections for purely lines. This led to generation of an escess number of nodes, which was not efficient. I looked up the standard algorithms to handle Bezier curve intersections, and they were good. However, upon further digging, I found a neat mathematical way to solve the problem. This method was perfect for the application, as it would compute the intersection points for two curves pretty fast and with very high accuracy, especially for curves with degree 3 or less. Apparently, Qt supports Bezier curves upto degree 3 as well.&lt;/p&gt;

&lt;p&gt;So, I’ll have to write the necessary code for the project based on &lt;a href=&quot;https://scholarsarchive.byu.edu/facpub/1/&quot;&gt;this text by Thomas Sederberg&lt;/a&gt;. Apart from the core algorithms, I’ll have to write unit tests and try to keep it as abstracted as possible. Although initially daunted by the project statement, tinkering around with Qt libraries and discussing stuff with the very helpful Krita team helped me get prepared for the project. So, I hope this will be a really awesome experience, and I look forward to work with the community, and contribute as much as I can. I’ll keep updating this blog, and let you know about my progress with the task at hand.&lt;/p&gt;</content><author><name>Tanmay Chavan</name></author><category term="jekyll" /><category term="update" /><summary type="html">Hi everyone! I’m Tanmay Chavan, a CS Sophomore at PICT, India. This summer, I’m going to be working for Krita, to implement cleaner operations on vector shapes.</summary></entry></feed>